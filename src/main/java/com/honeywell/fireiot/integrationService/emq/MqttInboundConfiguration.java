package com.honeywell.fireiot.integrationService.emq;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.context.annotation.Bean;import org.springframework.integration.annotation.ServiceActivator;import org.springframework.integration.channel.DirectChannel;import org.springframework.integration.core.MessageProducer;import org.springframework.integration.mqtt.core.MqttPahoClientFactory;import org.springframework.integration.mqtt.inbound.MqttPahoMessageDrivenChannelAdapter;import org.springframework.integration.mqtt.support.DefaultPahoMessageConverter;import org.springframework.messaging.MessageChannel;import org.springframework.messaging.MessageHandler;/** * @Author ï¼š YingZhang * @Description: * @Date : Create in 3:27 PM 6/5/2018 *///@Configurationpublic class MqttInboundConfiguration {    private static final Logger LOGGER = LoggerFactory.getLogger(MqttInboundConfiguration.class);    @Autowired    private MqttProperties mqttProperties;    @Qualifier("EMQMessageHandler")    @Autowired    private MessageHandler messageHandler;    @Autowired    private MqttPahoClientFactory mqttClientFactory;    @Bean    public MessageChannel mqttInputChannel() {        return new DirectChannel();    }    @Bean    public MessageProducer inbound() {//        String[] inboundTopics = mqttProperties.getOutbound().getTopicPrefix().split(",");        String[] inboundTopics = null;        MqttPahoMessageDrivenChannelAdapter adapter =                new MqttPahoMessageDrivenChannelAdapter( mqttProperties.getOutbound().getClientId(),mqttClientFactory,                        inboundTopics);//        adapter.setCompletionTimeout(5000);        adapter.setConverter(new DefaultPahoMessageConverter());        adapter.setQos(0);        adapter.setOutputChannel(mqttInputChannel());        return adapter;    }    @Bean    @ServiceActivator(inputChannel = "mqttInputChannel")    public MessageHandler handler() {        return messageHandler;    }}